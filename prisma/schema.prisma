generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model auth_log {
  id         Int           @id @default(autoincrement())
  user_id    Int
  type       auth_log_type @default(login)
  created_at DateTime      @default(now()) @db.Timestamp(0)
  apc_users  apc_users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_log_ibfk_1")

  @@index([user_id], map: "user_id")
}

enum auth_log_type {
  login
  logout
}

model apc_roles {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(100)
  description String?     @db.Text
  created_at  DateTime    @default(now()) @db.Timestamp(0)
  updated_at  DateTime    @default(now()) @db.Timestamp(0)
  is_deleted  Int         @default(0) @db.TinyInt
  apc_users   apc_users[]
}

model apc_users {
  id             Int       @id @default(autoincrement())
  name           String    @db.VarChar(244)
  email          String    @unique @db.VarChar(100)
  password       String    @db.Text
  birth_date     DateTime? @db.Date
  gender         String?   @db.VarChar(244)
  remember_token String?   @db.Text
  status         String    @default("ACTIVE") @db.VarChar(100)
  last_login     DateTime  @default(now()) @db.Timestamp(0)
  lat_long       String?   @db.VarChar(244)
  postal_code    String?   @db.VarChar(244)
  address        String?   @db.VarChar(244)
  city           String?   @db.VarChar(244)
  country        String?   @db.VarChar(244)
  image          String?   @db.VarChar(244)
  state          String?   @db.VarChar(244)
  number         String?   @db.VarChar(244)
  role_id        Int
  skip_payment   Boolean   @default(false)

  apc_roles        apc_roles         @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_ibfk_1")
  is_deleted       Int               @default(0) @db.TinyInt
  created_by       Int?
  created_at       DateTime          @default(now()) @db.Timestamp(0)
  updated_at       DateTime          @default(now()) @db.Timestamp(0)
  auth_log         auth_log[]
  apc_ads          apc_ads[]
  created_packages apc_packages[]
  payments         apc_payments[]
  bookings         apc_ads_booking[]
  meta             apc_user_meta[]

  @@index([role_id], map: "role_id")
}

model apc_user_meta {
  id         Int      @id @default(autoincrement())
  user_id    Int
  key        String
  value      String
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  user apc_users @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model apc_ads {
  id          Int       @id @default(autoincrement())
  name        String?   @db.VarChar(255)
  description String?   @db.Text
  author_id   Int
  video_url   String?
  duration    Int       @default(0)
  start_date  DateTime?
  end_date    DateTime?
  status      String?   @default("PENDING")
  is_deleted  Boolean   @default(false)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now()) @updatedAt

  author          apc_users           @relation(fields: [author_id], references: [id], onDelete: Cascade)
  media           apc_ads_media[]
  locations       apc_ads_locations[]
  apc_ads_booking apc_ads_booking[]
  play_list_ads   apc_play_list_ads[]
}

model apc_ads_locations {
  id          Int      @id @default(autoincrement())
  location_id Int
  ad_id       Int
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt

  location apc_locations @relation(fields: [location_id], references: [id], onDelete: Cascade)
  ad       apc_ads?      @relation(fields: [ad_id], references: [id], onDelete: Cascade)
}

model apc_ads_booking {
  id             Int      @id @default(autoincrement())
  ad_id          Int
  user_id        Int
  location_id    Int
  payment_id     Int?
  status         String   @default("PENDING")
  start_date     DateTime
  end_date       DateTime
  total_duration Int?
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now()) @updatedAt

  ad      apc_ads                   @relation(fields: [ad_id], references: [id], onDelete: Cascade)
  user    apc_users                 @relation(fields: [user_id], references: [id], onDelete: Cascade)
  payment apc_payments?             @relation(fields: [payment_id], references: [id], onDelete: Cascade)
  details apc_ads_booking_details[]
}

model apc_ads_booking_details {
  id         Int      @id @default(autoincrement())
  booking_id Int
  duration   Int
  date       DateTime

  booking apc_ads_booking @relation(fields: [booking_id], references: [id])
}

model apc_ads_media {
  id         Int      @id @default(autoincrement())
  name       String?  @db.VarChar(255)
  path       String?
  type       String?
  ad_id      Int?
  sort       Int      @default(0)
  duration   Float?
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamp(0)

  ad apc_ads? @relation(fields: [ad_id], references: [id], onDelete: Cascade)
}

model apc_devices {
  id          Int      @id @default(autoincrement())
  name        String?  @db.VarChar(255)
  ip          String?
  info        String?
  location_id Int?
  temperature Float?
  active_time String?
  is_deleted  Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt
  status      String?  @default("PENDING")
  start_time  DateTime @default(now())

  location apc_locations?    @relation(fields: [location_id], references: [id], onDelete: Cascade)
  logs     apc_device_logs[]
}

model apc_play_list {
  id          Int      @id @default(autoincrement())
  info        String?  @db.Text
  date        DateTime
  number      Int
  total_time  Int
  location_id Int
  count       Int      @default(0)
  video_url   String?  @db.Text
  is_deleted  Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt
  status      String?  @default("PENDING")

  play_list_ads apc_play_list_ads[]
  location      apc_locations       @relation(fields: [location_id], references: [id])
  logs          apc_device_logs[]
}

model apc_play_list_ads {
  id          Int      @id @default(autoincrement())
  description String?  @db.Text
  ad_id       Int
  playlist_id Int
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt

  playlist apc_play_list @relation(fields: [playlist_id], references: [id], onDelete: Cascade)
  ad       apc_ads       @relation(fields: [ad_id], references: [id], onDelete: Cascade)
}

model apc_locations {
  id         Int      @id @default(autoincrement())
  name       String
  lat_long   String?
  is_deleted Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  devices       apc_devices[]
  ads_locations apc_ads_locations[]
  apc_play_list apc_play_list[]
  logs          apc_device_logs[]
}

model apc_packages {
  id          Int      @id @default(autoincrement())
  name        String
  description String?  @db.Text
  duration    Int
  status      String   @default("PENDING")
  price       Float
  created_by  Int
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt
  is_deleted  Boolean  @default(false)

  user apc_users @relation(fields: [created_by], references: [id], onDelete: Cascade)
}

model apc_payments {
  id           Int      @id @default(autoincrement())
  package_id   Int
  user_id      Int
  amount       Float
  method       String
  payment_info String   @db.Text
  status       String   @default("PENDING")
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now()) @updatedAt
  is_deleted   Boolean  @default(false)

  user     apc_users         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  bookings apc_ads_booking[]
}

model apc_device_logs {
  id           Int      @id @default(autoincrement())
  device_id    Int
  location_id  Int
  play_list_id Int
  temperature  Float
  description  String?  @db.Text
  log_time     DateTime @default(now())
  created_at   DateTime @default(now())
  active_time  String?

  device    apc_devices   @relation(fields: [device_id], references: [id], onDelete: Cascade)
  location  apc_locations @relation(fields: [location_id], references: [id], onDelete: Cascade)
  play_list apc_play_list @relation(fields: [play_list_id], references: [id], onDelete: Cascade)
}
